using System;
using System.Runtime.Serialization;
using Esynctraining.AC.Provider.Entities;
using Esynctraining.Core.Extensions;

namespace Esynctraining.AdobeConnect.Api.MeetingRecording.Dto
{
    [DataContract]
    public class RecordingDto : IRecordingDto
    {
        public RecordingDto(Recording recording, string accountUrl, TimeZoneInfo timezone)
        {
            Id = recording.ScoId;
            name = recording.Name;
            summary = recording.Description;
            begin_date = recording.BeginDate.ToString("MM/dd/yy h:mm:ss tt");
            BeginAt = (long)recording.BeginDate.ConvertToUnixTimestamp() + (long)GetTimezoneShift(timezone, recording.BeginDate);
            duration = GetDurationWithoutMilliseconds(recording.Duration);
            url = GenerateJoinLink(recording.UrlPath);
            status = GetRecordingStatus(recording.JobStatus);
            is_mp4 = recording.Icon == "mp4-archive";
            download_url = this.is_mp4 ? GenerateDownloadLink(accountUrl, recording.UrlPath, recording.Name) : null;
        }

        public RecordingDto(ScoContent recording, string accountUrl, bool isPublic, TimeZoneInfo timezone)
        {
            Id = recording.ScoId;
            name = recording.Name;
            summary = recording.Description;
            begin_date = recording.BeginDate.ToString("MM/dd/yy h:mm:ss tt");
            BeginAt = (long)recording.BeginDate.ConvertToUnixTimestamp();
            duration = ConvertSecondsToTimeFormat(recording.Duration) + (long)GetTimezoneShift(timezone, recording.BeginDate);
            url = GenerateJoinLink(recording.UrlPath);
            is_mp4 = recording.Icon == "mp4-archive";
            download_url = this.is_mp4 ? GenerateDownloadLink(accountUrl, recording.UrlPath, recording.Name) : null;
            IsPublic = isPublic;
        }

        public RecordingDto() { }


        /// <summary>
        /// Gets or sets a recording url for download. Available only for mp4.
        /// </summary>
        [DataMember]
        public string download_url { get; set; }

        /// <summary>
        /// Gets or sets a recording status.
        /// </summary>
        [DataMember]
        public string status { get; set; }

        // AC disabled creation of mp4 on their side, but mp4's are still there for a lot of users (as they used their api too). That flag indicates that this rec was converted to mp4 on their side
        [DataMember]
        public bool is_mp4 { get; set; }

        [DataMember]
        
        public string begin_date { get; set; }

        [DataMember(Name = "beginAt")]
        public long BeginAt { get; set; }

        //[DataMember]
        //public string description { get; set; }

        [DataMember]
        public string duration { get; set; }

        //[DataMember]
        //public string end_date { get; set; }

        [DataMember(Name = "id")]
        public string Id { get; set; }

        [DataMember]
        public string name { get; set; }

        [DataMember]
        public string summary { get; set; }

        [DataMember]
        public string url { get; set; }

        [DataMember(Name = "is_public")]
        public bool IsPublic { get; set; }

        //[DataMember]
        //public string password { get; set; }

        [DataMember(Name = "published")]
        public bool Published { get; set; }

        #region methods

        private static string GetRecordingStatus(string jobStatus)
        {
            if (string.IsNullOrEmpty(jobStatus))
            {
                return null;
            }

            string recordingStatus = null;

            switch (jobStatus)
            {
                case "job-pending":
                    recordingStatus = "in_progress";
                    break;
                case "job-completed":
                    recordingStatus = "completed";
                    break;
                case "job-queued":
                    recordingStatus = "job-queued";
                    break;
                case "job-error":
                    recordingStatus = "job-error";
                    break;
                case "job-downloading":
                    recordingStatus = "job-downloading";
                    break;
            }

            return recordingStatus;
        }

        private static string GenerateJoinLink(string recordingUrlPath)
        {
            return recordingUrlPath.Trim("/".ToCharArray());
        }

        private static string GenerateDownloadLink(string accountUrl, string recordingPath, string recordingName)
        {
            return accountUrl + recordingPath + "output/ " + recordingName + ".zip?download=zip";
        }

        private static string GetDurationWithoutMilliseconds(string date)
        {
            var index = date.IndexOf(".", StringComparison.OrdinalIgnoreCase);
            if (index > 0)
            {
                return date.Substring(0, index);
            }

            return date;
        }

        private static string ConvertSecondsToTimeFormat(int seconds)
        {
            var t = TimeSpan.FromSeconds(seconds);
            return $"{t.Hours:D2}:{t.Minutes:D2}:{t.Seconds:D2}";
        }

        private static double GetTimezoneShift(TimeZoneInfo timezone, DateTime value)
        {
            if (timezone != null)
            {
                var offset = timezone.GetUtcOffset(value).TotalMilliseconds;
                return offset;
            }

            return 0;
        }

        #endregion

    }
}
