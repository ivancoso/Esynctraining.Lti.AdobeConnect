namespace EdugameCloud.Lti.Controllers
{
    using System;
    using System.Web.Mvc;
    using EdugameCloud.Lti.Domain.Entities;
    using EdugameCloud.Lti.DTO;
    using Esynctraining.Core.Domain;
    public partial class LtiController : Controller
    {
        [HttpPost]
        public virtual ActionResult UpdateUser(string lmsProviderName, LmsUserDTO user, int meetingId)
        {
            LmsCompany credentials = null;
            try
            {
                if (string.IsNullOrWhiteSpace(lmsProviderName))
                    throw new ArgumentException("lmsProviderName can't be empty", "lmsProviderName");
                if (meetingId <= 0)
                    throw new ArgumentOutOfRangeException("meetingId");

                var session = GetReadOnlySession(lmsProviderName);
                credentials = session.LmsCompany;

                string error;
                LmsUserDTO updatedUser = null;
                if (user.guest_id.HasValue)
                {
                    updatedUser = this.usersSetup.UpdateGuest(
                        credentials,
                        this.GetAdobeConnectProvider(credentials),
                        session.LtiSession.LtiParam,
                        user,
                        meetingId,
                        out error);
                }
                else
                {
                    updatedUser = this.usersSetup.UpdateUser(
                        credentials,
                        this.GetAdobeConnectProvider(credentials),
                        session.LtiSession.LtiParam,
                        user,
                        meetingId,
                        out error);
                }

                // TRICK: if user not found in LMS - return original record from client  (remove user from meeting participant list - user doesn't exist in LMS)
                if (string.IsNullOrEmpty(error))
                    return Json(OperationResultWithData<LmsUserDTO[]>.Success(new[] { updatedUser ?? user }));

                return Json(OperationResult.Error(error));
            }
            catch (Exception ex)
            {
                string errorMessage = GetOutputErrorMessage("UpdateUser", credentials, ex);
                return Json(OperationResult.Error(errorMessage));
            }
        }

        // NOTE: id - is userID (Id of the user in LMS) or value like "MeetingSetup.model.User-47" (generated by extJS if id was empty - if user doesn't exists in LMS)
        [HttpPost]
        public virtual ActionResult RemoveFromAcMeeting(string lmsProviderName, int meetingId, string ac_id, int? guest_id, string id)
        {
            LmsCompany credentials = null;
            try
            {
                if (string.IsNullOrWhiteSpace(lmsProviderName))
                    throw new ArgumentException("lmsProviderName can't be empty", "lmsProviderName");
                if (meetingId <= 0)
                    throw new ArgumentOutOfRangeException("meetingId");

                var session = GetReadOnlySession(lmsProviderName);
                credentials = session.LmsCompany;

                string error = null;
                if (guest_id.HasValue)
                {
                    this.usersSetup.DeleteGuestFromAcMeeting(
                        credentials,
                        this.GetAdobeConnectProvider(credentials),
                        session.LtiSession.LtiParam,
                        ac_id,
                        meetingId,
                        guest_id.Value,
                        out error);
                }
                else
                {
                    this.usersSetup.DeleteUserFromAcMeeting(
                        credentials,
                        this.GetAdobeConnectProvider(credentials),
                        session.LtiSession.LtiParam,
                        ac_id,
                        meetingId,
                        out error);
                }

                if (string.IsNullOrEmpty(error))
                    return Json(OperationResultWithData<string>.Success(id));

                return Json(OperationResult.Error(error));
            }
            catch (Exception ex)
            {
                string errorMessage = GetOutputErrorMessage("UpdateUser", credentials, ex);
                return Json(OperationResult.Error(errorMessage));
            }
        }

    }

}