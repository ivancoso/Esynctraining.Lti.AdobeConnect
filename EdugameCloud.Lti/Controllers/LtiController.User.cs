using System;
using System.Collections.Generic;
using System.Web.Mvc;
using EdugameCloud.Lti.Core.Constants;
using EdugameCloud.Lti.Domain.Entities;
using EdugameCloud.Lti.DTO;
using Esynctraining.Core.Domain;

namespace EdugameCloud.Lti.Controllers
{
    public partial class LtiController
    {
        [HttpPost]
        [LmsAuthorizeBase]
        public virtual ActionResult UpdateUser(LmsUserSession session, int meetingId, LmsUserDTO[] users)
        {
            if (meetingId <= 0)
                throw new ArgumentOutOfRangeException(nameof(meetingId));

            var credentials = session.LmsCompany;
            string lastError = null;
            var updatedUsers = new List<LmsUserDTO>();
            foreach (var user in users)
            {
                try
                {
                    // TRICK: client-side passes 'email' but user.GetEmail() expects primary-email
                    if (string.IsNullOrEmpty(user.PrimaryEmail) && !string.IsNullOrEmpty(user.email))
                        user.PrimaryEmail = user.email;

                    LmsUserDTO updatedUser = null;
                    string error;
                    if (user.GuestId.HasValue)
                    {
                        updatedUser = this.usersSetup.UpdateGuest(
                            credentials,
                            this.GetAdminProvider(credentials),
                            session.LtiSession.LtiParam,
                            user,
                            meetingId,
                            out error);
                    }
                    else
                    {
                        updatedUser = this.usersSetup.UpdateUser(
                            credentials,
                            this.GetAdminProvider(credentials),
                            session.LtiSession.LtiParam,
                            user,
                            meetingId,
                            out error);
                    }

                    if (!string.IsNullOrEmpty(error))
                    {
                        Logger.Error($"[UpdateUsers] {error}. UserId={user.Id}, MeetingId={meetingId}");
                        lastError = error;
                    }
                    else
                    {
                        // TRICK: if user not found in LMS - return original record from client  (remove user from meeting participant list - user doesn't exist in LMS)
                        updatedUsers.Add(updatedUser ?? user);
                    }
                }
                catch (Exception ex)
                {
                    lastError = GetOutputErrorMessage("UpdateUsers", credentials, ex);
                    Logger.Error($"[RemoveUsers] UserId={user.Id}, MeetingId={meetingId}, {lastError}", ex);
                }
            }

            if (string.IsNullOrEmpty(lastError))
                return Json(updatedUsers.ToSuccessResult());

            return Json(new OperationResultWithData<IEnumerable<LmsUserDTO>>
            {
                Message = Resources.Messages.UsersCouldNotBeUpdated,
                Data = updatedUsers
            });
        }

        // NOTE: id - is userID (Id of the user in LMS) or value like "MeetingSetup.model.User-47" (generated by extJS if id was empty - if user doesn't exists in LMS)
        [HttpPost]
        [LmsAuthorizeBase]
        public virtual ActionResult RemoveFromAcMeeting(LmsUserSession session, int meetingId, LmsUserDTO[] users)
        {
            if (meetingId <= 0)
                throw new ArgumentOutOfRangeException(nameof(meetingId));

            var credentials = session.LmsCompany;
            if (!credentials.GetSetting<bool>(LmsCompanySettingNames.EnableRemoveUser, true))
                return Json(OperationResult.Error("Operation is not enabled."));

            string error;
            string lastError = null;
            List<LmsUserDTO> removedUsers = new List<LmsUserDTO>();
            foreach (var user in users)
            {
                try
                {
                    if (user.GuestId.HasValue)
                    {
                        this.usersSetup.DeleteGuestFromAcMeeting(
                            credentials,
                            this.GetAdminProvider(credentials),
                            session.LtiSession.LtiParam,
                            user.AcId,
                            meetingId,
                            user.GuestId.Value,
                            out error);
                    }
                    else
                    {
                        this.usersSetup.DeleteUserFromAcMeeting(
                            credentials,
                            this.GetAdminProvider(credentials),
                            session.LtiSession.LtiParam,
                            user.AcId,
                            meetingId,
                            out error);
                    }
                    if (!string.IsNullOrEmpty(error))
                    {
                        Logger.Error($"[RemoveUsers] {error}. UserId={user.Id}, MeetingId={meetingId}");
                        lastError = error;
                    }
                    else
                    {
                        removedUsers.Add(user);
                    }
                }
                catch (Exception ex)
                {
                    lastError = GetOutputErrorMessage("RemoveUsers", credentials, ex);
                    Logger.Error($"[RemoveUsers] UserId={user.Id}, MeetingId={meetingId}, {lastError}", ex);
                }
            }

            if (string.IsNullOrEmpty(lastError))
                return Json(removedUsers.ToSuccessResult());

            return Json(new OperationResultWithData<IEnumerable<LmsUserDTO>>
            {
                Message = Resources.Messages.UsersCouldNotBeRemoved,
                Data = removedUsers
            });
        }

    }

}