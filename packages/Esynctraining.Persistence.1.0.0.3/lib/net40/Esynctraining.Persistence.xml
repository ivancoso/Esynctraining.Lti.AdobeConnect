<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Esynctraining.Persistence</name>
    </assembly>
    <members>
        <member name="T:Esynctraining.Persistence.Conventions.EnumConvention">
            <summary>
            The convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.EnumConvention.Accept(FluentNHibernate.Conventions.AcceptanceCriteria.IAcceptanceCriteria{FluentNHibernate.Conventions.Inspections.IPropertyInspector})">
            <summary>
            The accept.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.EnumConvention.Apply(FluentNHibernate.Conventions.Instances.IPropertyInstance)">
            <summary>
            The apply.
            </summary>
            <param name="target">
            The target.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ForeignKeyConstraintHasManyNameConvention">
            <summary>
                The foreign key constraint has many name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ForeignKeyConstraintHasManyNameConvention.Apply(FluentNHibernate.Conventions.Instances.IOneToManyCollectionInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ForeignKeyConstraintHasManyToManyNameConvention">
            <summary>
                The foreign key constraint has many to many name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ForeignKeyConstraintHasManyToManyNameConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToManyCollectionInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ForeignKeyConstraintReferenceNameConvention">
            <summary>
            The foreign key constraint reference name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ForeignKeyConstraintReferenceNameConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToOneInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ForeignKeyNameConvention">
            <summary>
            The foreign key name convention.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.Conventions.ForeignKeyNameConvention.exceptions">
            <summary>
            The exceptions.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ForeignKeyNameConvention.GetKeyName(FluentNHibernate.Member,System.Type)">
            <summary>
            The get key name.
            </summary>
            <param name="property">
            The property.
            </param>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ManyToManyNameConvention">
            <summary>
            The many to many name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ManyToManyNameConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToManyCollectionInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.PrimaryKeyNameConvention">
            <summary>
            The primary key name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.PrimaryKeyNameConvention.Apply(FluentNHibernate.Conventions.Instances.IIdentityInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.PropertyNameConvention">
            <summary>
            The property name convention.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.Conventions.PropertyNameConvention.Exceptions">
            <summary>
                The exceptions.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.PropertyNameConvention.Apply(FluentNHibernate.Conventions.Instances.IPropertyInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.ReferenceNameConvention">
            <summary>
            The reference name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.ReferenceNameConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToOneInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.TableNameConvention">
            <summary>
            The table name convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.TableNameConvention.Accept(FluentNHibernate.Conventions.AcceptanceCriteria.IAcceptanceCriteria{FluentNHibernate.Conventions.Inspections.IClassInspector})">
            <summary>
            The accept.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.TableNameConvention.Apply(FluentNHibernate.Conventions.Instances.IClassInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Conventions.TimePropertyConvention">
            <summary>
            The time property convention.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Conventions.TimePropertyConvention.Apply(FluentNHibernate.Conventions.Instances.IPropertyInstance)">
            <summary>
            The apply.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.Extensions.FluentExtensions">
            <summary>
            The fluent extensions.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Extensions.FluentExtensions.Default``1(FluentNHibernate.Mapping.PropertyPart)">
            <summary>
            The default.
            </summary>
            <param name="propertyPart">
            The property part.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:FluentNHibernate.Mapping.PropertyPart"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.Extensions.LifeStyleExtensions">
            <summary>
                The life style extensions.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Extensions.LifeStyleExtensions.PerWcfOperationIncludingWebOrb``1(Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{``0})">
            <summary>
            The per wcf operation including web orb.
            </summary>
            <param name="group">
            The group.
            </param>
            <typeparam name="TService">
            </typeparam>
            <returns>
            The <see cref="T:Castle.MicroKernel.Registration.ComponentRegistration`1"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.FluentConfiguration">
            <summary>
            The fluent configuration.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.ColumnNameTemplate">
            <summary>
            The column name template.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.ForeignKeyNameTemplate">
            <summary>
            The foreign key name template.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.ForeignKeyTemplate">
            <summary>
            The foreign key template.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.ManyToManyTemplate">
            <summary>
            The many to many template.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.ReferenceNameTemplate">
            <summary>
            The reference name template.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.FluentConfiguration.TableNameTemplate">
            <summary>
            The table name template.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.FluentConfiguration.Configured(NHibernate.Cfg.Configuration)">
            <summary>
            The configured.
            </summary>
            <param name="cfg">
            The config.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.FluentConfiguration.Configure(FluentNHibernate.PersistenceModel,NHibernate.Cfg.Configuration)">
            <summary>
            The configured.
            </summary>
            <param name="persistenceModel">
            The persistence Model.
            </param>
            <param name="cfg">
            The config.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.FluentConfiguration.AddConventions(FluentNHibernate.Conventions.IConventionFinder)">
            <summary>
            The add conventions.
            </summary>
            <param name="conventions">
            The conventions.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.ISessionSource">
            <summary>
            The SessionSource interface.
            </summary>
        </member>
        <member name="P:Esynctraining.Persistence.ISessionSource.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.Mappings.BaseClassMap`1">
            <summary>
            The base class map.
            </summary>
            <typeparam name="T">
            Type of entity id
            </typeparam>
        </member>
        <member name="M:Esynctraining.Persistence.Mappings.BaseClassMap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.Mappings.BaseClassMap`1"/> class.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.Mappings.BaseClassMapGuid`1">
            <summary>
            The base class map GUID.
            </summary>
            <typeparam name="T">
            Type of entity
            </typeparam>
        </member>
        <member name="M:Esynctraining.Persistence.Mappings.BaseClassMapGuid`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Esynctraining.Persistence.Mappings.BaseClassMapGuid`1"/> class.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.NameSpaceTypeSource">
            <summary>
            The name space type source.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.NameSpaceTypeSource.mappingPath">
            <summary>
            The mapping path.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.NameSpaceTypeSource.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NameSpaceTypeSource.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NameSpaceTypeSource"/> class. 
            The assembly name space type source.
            </summary>
            <param name="source">
            Assembly with mappings
            </param>
            <param name="mappingPath">
            namespace
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NameSpaceTypeSource.GetIdentifier">
            <summary>
            The get identifier.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.NameSpaceTypeSource.GetTypes">
            <summary>
            The get types.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.NameSpaceTypeSource.LogSource(FluentNHibernate.Diagnostics.IDiagnosticLogger)">
            <summary>
            The log source.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="T:Esynctraining.Persistence.NHibernateConfigurationActivator">
            <summary>
            The n hibernate configuration activator.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateConfigurationActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NHibernateConfigurationActivator"/> class.
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="kernel">
            The kernel.
            </param>
            <param name="onCreation">
            The on creation.
            </param>
            <param name="onDestruction">
            The on destruction.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateConfigurationActivator.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>
            The create instance.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="constructor">
            The constructor.
            </param>
            <param name="arguments">
            The arguments.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.NHibernateSessionActivator">
            <summary>
            The n hibernate session activator.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NHibernateSessionActivator"/> class.
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="kernel">
            The kernel.
            </param>
            <param name="onCreation">
            The on creation.
            </param>
            <param name="onDestruction">
            The on destruction.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionActivator.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>
            The create instance.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="constructor">
            The constructor.
            </param>
            <param name="arguments">
            The arguments.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.NHibernateSessionFactoryActivator">
            <summary>
            The n hibernate session factory activator.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionFactoryActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NHibernateSessionFactoryActivator"/> class.
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="kernel">
            The kernel.
            </param>
            <param name="onCreation">
            The on creation.
            </param>
            <param name="onDestruction">
            The on destruction.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionFactoryActivator.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>
            The create instance.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="constructor">
            The constructor.
            </param>
            <param name="arguments">
            The arguments.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esynctraining.Persistence.NHibernateSessionSource">
            <summary>
            The n hibernate session source.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.NHibernateSessionSource.session">
            <summary>
            The session.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionSource.#ctor(NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NHibernateSessionSource"/> class.
            </summary>
            <param name="sessionFactory">
            The session factory.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionSource.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="P:Esynctraining.Persistence.NHibernateSessionSource.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.NHibernateSessionWebSource">
            <summary>
            The n hibernate session web source.
            </summary>
        </member>
        <member name="F:Esynctraining.Persistence.NHibernateSessionWebSource.lockObj">
            <summary>
            The lock obj.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionWebSource.#ctor(NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.NHibernateSessionWebSource"/> class.
            </summary>
            <param name="sessionFactory">
            The session factory.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.NHibernateSessionWebSource.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.Repository`2">
            <summary>
            The repository.
            </summary>
            <typeparam name="TEntity">
            Type of entity <see cref="!:TEntity"/>
            </typeparam>
            <typeparam name="TId">
            Type of entity id <see cref="!:TId"/>
            </typeparam>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.#ctor(Esynctraining.Persistence.ISessionSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Esynctraining.Persistence.Repository`2"/> class.
            </summary>
            <param name="manager">
            The manager.
            </param>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll(Esynctraining.Core.Business.Queries.DefaultQueryOver{`0,`1})">
            <summary>
            The find all.
            </summary>
            <param name="defaultQuery">
            The default query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            The find all.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll(NHibernate.Criterion.DetachedCriteria,System.Int32)">
            <summary>
            The find all.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            The find all.
            </summary>
            <param name="queryOver">
            The query over.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll">
            <summary>
            The find all.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.Count">
            <summary>
            The find all.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAllPaged(System.Int32,System.Int32)">
            <summary>
            The find all paged.
            </summary>
            <param name="pageIndex">
            The page index.
            </param>
            <param name="pageSize">
            The page size.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindAll``1(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            The find all.
            </summary>
            <typeparam name="TOtherEntity">
            The other entity type
            </typeparam>
            <param name="queryOver">
            The query over.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne(Esynctraining.Core.Business.Queries.DefaultQueryOver{`0,`1})">
            <summary>
            The find one.
            </summary>
            <param name="defaultQuery">
            The default query.
            </param>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            The find one.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            The find one.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne(NHibernate.Criterion.QueryOver{`0,`0})">
            <summary>
            The find one.
            </summary>
            <param name="queryOver">
            The query over.
            </param>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            The find one.
            </summary>
            <param name="criteria">
            The criteria.
            </param>
            <typeparam name="TReturn">
            Returned object type
            </typeparam>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne``1(Esynctraining.Core.Business.Queries.DefaultQueryOver{`0,`1})">
            <summary>
            The find one.
            </summary>
            <param name="defaultQuery">
            The default query.
            </param>
            <typeparam name="TReturn">
            Returned object type
            </typeparam>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.FindOne``1(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            The find one.
            </summary>
            <param name="queryOver">
            The query over.
            </param>
            <typeparam name="TReturn">
            Returned object type
            </typeparam>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.Flush">
            <summary>
            The flush.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.RegisterDelete(`0)">
            <summary>
            The register delete.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="!:TEntity"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.RegisterSave(`0)">
            <summary>
            The register save.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="!:TEntity"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.StoreProcedureForOne``1(System.String,Esynctraining.Core.Business.StoreProcedureParam[])">
            <summary>
            The store procedure for one.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="storeProcedureParams">
            The store procedure parameters.
            </param>
            <typeparam name="TSome">
            Type of resulting value
            </typeparam>
            <returns>
            The <see cref="T:NHibernate.IFutureValue`1"/>.
            </returns>
        </member>
        <member name="M:Esynctraining.Persistence.Repository`2.StoreProcedureForMany``1(System.String,Esynctraining.Core.Business.StoreProcedureParam[])">
            <summary>
            The store procedure for many.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="storeProcedureParams">
            The store procedure parameters.
            </param>
            <typeparam name="TSome">
            Type of resulting value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="P:Esynctraining.Persistence.Repository`2.Manager">
            <summary>
            Gets or sets the manager.
            </summary>
        </member>
        <member name="P:Esynctraining.Persistence.Repository`2.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Esynctraining.Persistence.WindsorContainerConfiguration">
            <summary>
            The windsor container configuration.
            </summary>
        </member>
        <member name="M:Esynctraining.Persistence.WindsorContainerConfiguration.RegisterComponents(Castle.Windsor.IWindsorContainer,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The register components.
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="console">
            The console.
            </param>
            <param name="wcf">
            The wcf.
            </param>
            <param name="web">
            The web.
            </param>
        </member>
    </members>
</doc>
