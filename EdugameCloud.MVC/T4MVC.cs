// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using EdugameCloud.MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class EdugameCloudT4
{
    public static EdugameCloud.MVC.Controllers.ErrorController Error = new EdugameCloud.MVC.Controllers.T4MVC_ErrorController();
    public static EdugameCloud.MVC.Controllers.FileController File = new EdugameCloud.MVC.Controllers.T4MVC_FileController();
    public static EdugameCloud.MVC.Controllers.HomeController Home = new EdugameCloud.MVC.Controllers.T4MVC_HomeController();
    public static EdugameCloud.MVC.SharedController Shared = new EdugameCloud.MVC.SharedController();
}

namespace EdugameCloud.MVC
{
}

namespace EdugameCloud.MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace EdugameCloud.MVC.Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
                      
        public static readonly string core_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/core.min.js") ? Url("core.min.js") : Url("core.js");
                                            
        public static readonly string jquery_1_8_2_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.2.intellisense.min.js") ? Url("jquery-1.8.2.intellisense.min.js") : Url("jquery-1.8.2.intellisense.js");
                      
        public static readonly string jquery_1_8_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.2.min.js") ? Url("jquery-1.8.2.min.js") : Url("jquery-1.8.2.js");
                      
        public static readonly string jquery_1_8_2_min_js = Url("jquery-1.8.2.min.js");
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
                      
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string swfobject_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/swfobject.min.js") ? Url("swfobject.min.js") : Url("swfobject.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string header_png = Url("header.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class logos {
                private const string URLPATH = "~/Content/images/logos";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string engage_jpg = Url("engage.jpg");
                public static readonly string esynctrainig_ce_jpg = Url("esynctrainig_ce.jpg");
                public static readonly string figleaf_png = Url("figleaf.png");
                public static readonly string headeBG_png = Url("headeBG.png");
                public static readonly string leftIcon_png = Url("leftIcon.png");
                public static readonly string logoBackCloud_png = Url("logoBackCloud.png");
                public static readonly string logoBackRightCloud_png = Url("logoBackRightCloud.png");
                public static readonly string logoBig_png = Url("logoBig.png");
                public static readonly string logoSmall_png = Url("logoSmall.png");
                public static readonly string meetingone_jpg = Url("meetingone.jpg");
                public static readonly string singleUser_png = Url("singleUser.png");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lti_config {
            private const string URLPATH = "~/Content/lti-config";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Blackboard_pdf = Url("Blackboard.pdf");
            public static readonly string brainhoney_xml = Url("brainhoney.xml");
            public static readonly string canvas_xml = Url("canvas.xml");
            public static readonly string index_html = Url("index.html");
            public static readonly string Moodle_pdf = Url("Moodle.pdf");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lti_instructions {
            private const string URLPATH = "~/Content/lti-instructions";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Blackboard_pdf = Url("Blackboard.pdf");
            public static readonly string BrainHoney_pdf = Url("BrainHoney.pdf");
            public static readonly string Canvas_pdf = Url("Canvas.pdf");
            public static readonly string Moodle_pdf = Url("Moodle.pdf");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class styles {
            private const string URLPATH = "~/Content/styles";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                 
            public static readonly string reset_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/reset.min.css") ? Url("reset.min.css") : Url("reset.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class swf {
            private const string URLPATH = "~/Content/swf";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class admin {
                private const string URLPATH = "~/Content/swf/admin";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Adm_EdugameCloud_1_0_1_7_swf = Url("Adm_EdugameCloud_1.0.1.7.swf");
                public static readonly string appStyles_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/appStyles.min.css") ? Url("appStyles.min.css") : Url("appStyles.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class resources {
                    private const string URLPATH = "~/Content/swf/admin/resources";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class fonts {
                        private const string URLPATH = "~/Content/swf/admin/resources/fonts";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string ARIAL_TTF = Url("ARIAL.TTF");
                        public static readonly string ARIALBD_TTF = Url("ARIALBD.TTF");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class icons {
                        private const string URLPATH = "~/Content/swf/admin/resources/icons";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string add_png = Url("add.png");
                        public static readonly string addSmall_png = Url("addSmall.png");
                        public static readonly string announce_png = Url("announce.png");
                        public static readonly string bird_png = Url("bird.png");
                        public static readonly string closeRed_png = Url("closeRed.png");
                        public static readonly string cross_png = Url("cross.png");
                        public static readonly string crossListIcon_png = Url("crossListIcon.png");
                        public static readonly string crosswordIcon_png = Url("crosswordIcon.png");
                        public static readonly string crosswordIconSolidColor_png = Url("crosswordIconSolidColor.png");
                        public static readonly string deleteIcon_png = Url("deleteIcon.png");
                        public static readonly string dislike_png = Url("dislike.png");
                        public static readonly string downArrow_png = Url("downArrow.png");
                        public static readonly string downListIcon_png = Url("downListIcon.png");
                        public static readonly string errorBig_png = Url("errorBig.png");
                        public static readonly string facebook_png = Url("facebook.png");
                        public static readonly string gearBox_png = Url("gearBox.png");
                        public static readonly string helpIcon_png = Url("helpIcon.png");
                        public static readonly string hexagonIcon_png = Url("hexagonIcon.png");
                        public static readonly string hSplit_png = Url("hSplit.png");
                        public static readonly string iconFillIn_png = Url("iconFillIn.png");
                        public static readonly string iconHotspot_png = Url("iconHotspot.png");
                        public static readonly string iconImageChoice_png = Url("iconImageChoice.png");
                        public static readonly string iconMatching_png = Url("iconMatching.png");
                        public static readonly string iconMultiChoice_png = Url("iconMultiChoice.png");
                        public static readonly string iconOrder_png = Url("iconOrder.png");
                        public static readonly string iconSppedoMeter_png = Url("iconSppedoMeter.png");
                        public static readonly string iconTrueFalse_png = Url("iconTrueFalse.png");
                        public static readonly string info_png = Url("info.png");
                        public static readonly string infoGreyIcon_png = Url("infoGreyIcon.png");
                        public static readonly string leftArrow_png = Url("leftArrow.png");
                        public static readonly string like_png = Url("like.png");
                        public static readonly string linkedin_png = Url("linkedin.png");
                        public static readonly string listIcon_png = Url("listIcon.png");
                        public static readonly string logout_png = Url("logout.png");
                        public static readonly string multiUser_png = Url("multiUser.png");
                        public static readonly string ovalIcon_png = Url("ovalIcon.png");
                        public static readonly string pencil_png = Url("pencil.png");
                        public static readonly string pentagonIcon_png = Url("pentagonIcon.png");
                        public static readonly string pieChart_png = Url("pieChart.png");
                        public static readonly string preview_png = Url("preview.png");
                        public static readonly string questionStep_png = Url("questionStep.png");
                        public static readonly string quizIcon_png = Url("quizIcon.png");
                        public static readonly string quizIconSolidColor_png = Url("quizIconSolidColor.png");
                        public static readonly string quizRight_png = Url("quizRight.png");
                        public static readonly string quizWrong_png = Url("quizWrong.png");
                        public static readonly string rankBG_png = Url("rankBG.png");
                        public static readonly string rectangleIcon_png = Url("rectangleIcon.png");
                        public static readonly string remove_png = Url("remove.png");
                        public static readonly string reportIcon_png = Url("reportIcon.png");
                        public static readonly string reportIconSolidColor_png = Url("reportIconSolidColor.png");
                        public static readonly string reset_png = Url("reset.png");
                        public static readonly string review_png = Url("review.png");
                        public static readonly string rightArrow_png = Url("rightArrow.png");
                        public static readonly string searchClear_png = Url("searchClear.png");
                        public static readonly string searchSmall_png = Url("searchSmall.png");
                        public static readonly string shared_png = Url("shared.png");
                        public static readonly string singleUser_png = Url("singleUser.png");
                        public static readonly string slideShare_png = Url("slideShare.png");
                        public static readonly string smallNo_png = Url("smallNo.png");
                        public static readonly string smallYes_png = Url("smallYes.png");
                        public static readonly string socialIconSolidColor_png = Url("socialIconSolidColor.png");
                        public static readonly string starIcon_png = Url("starIcon.png");
                        public static readonly string supportIcon_png = Url("supportIcon.png");
                        public static readonly string surveyIcon_png = Url("surveyIcon.png");
                        public static readonly string surveyIconSolidColor_png = Url("surveyIconSolidColor.png");
                        public static readonly string testIconSolidColor_png = Url("testIconSolidColor.png");
                        public static readonly string textIcon_png = Url("textIcon.png");
                        public static readonly string ticMark_png = Url("ticMark.png");
                        public static readonly string topArrow_png = Url("topArrow.png");
                        public static readonly string tringleIcon_png = Url("tringleIcon.png");
                        public static readonly string upDownIcon_png = Url("upDownIcon.png");
                        public static readonly string user_png = Url("user.png");
                        public static readonly string videoIcon_png = Url("videoIcon.png");
                        public static readonly string vSplit_png = Url("vSplit.png");
                        public static readonly string wizardGeneral_png = Url("wizardGeneral.png");
                        public static readonly string wizardMap_png = Url("wizardMap.png");
                        public static readonly string wizardMy_png = Url("wizardMy.png");
                        public static readonly string wizardPreview_png = Url("wizardPreview.png");
                        public static readonly string wizardText_png = Url("wizardText.png");
                        public static readonly string wizardTheme_png = Url("wizardTheme.png");
                        public static readonly string wordSearchIcon_png = Url("wordSearchIcon.png");
                        public static readonly string yesIcon_png = Url("yesIcon.png");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Content/swf/admin/resources/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string ajax_loader_gif = Url("ajax-loader.gif");
                        public static readonly string animation_swf = Url("animation.swf");
                        public static readonly string bg_png = Url("bg.png");
                        public static readonly string bg3_gif = Url("bg3.gif");
                        public static readonly string blank_png = Url("blank.png");
                        public static readonly string brandLogo_png = Url("brandLogo.png");
                        public static readonly string crosswordWizardBack_png = Url("crosswordWizardBack.png");
                        public static readonly string custom_png = Url("custom.png");
                        public static readonly string downIcon_png = Url("downIcon.png");
                        public static readonly string eSyncLogo_png = Url("eSyncLogo.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class flags {
                            private const string URLPATH = "~/Content/swf/admin/resources/images/flags";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string gb_png = Url("gb.png");
                            public static readonly string in_png = Url("in.png");
                            public static readonly string jp_png = Url("jp.png");
                            public static readonly string us_png = Url("us.png");
                        }
                    
                        public static readonly string headeBG_png = Url("headeBG.png");
                        public static readonly string leftIcon_png = Url("leftIcon.png");
                        public static readonly string loader_swf = Url("loader.swf");
                        public static readonly string logo_png = Url("logo.png");
                        public static readonly string logoBig_png = Url("logoBig.png");
                        public static readonly string logoSmall_png = Url("logoSmall.png");
                        public static readonly string long_png = Url("long.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class mapPreview {
                            private const string URLPATH = "~/Content/swf/admin/resources/images/mapPreview";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bing_jpg = Url("bing.jpg");
                            public static readonly string google_jpg = Url("google.jpg");
                            public static readonly string ilog_jpg = Url("ilog.jpg");
                        }
                    
                        public static readonly string mask_png = Url("mask.png");
                        public static readonly string maskBG_png = Url("maskBG.png");
                        public static readonly string preview_png = Url("preview.png");
                        public static readonly string quizWizardBack_png = Url("quizWizardBack.png");
                        public static readonly string socialWizardBack_png = Url("socialWizardBack.png");
                        public static readonly string sort_png = Url("sort.png");
                        public static readonly string swfIcon_png = Url("swfIcon.png");
                        public static readonly string videoHelpThumb_jpg = Url("videoHelpThumb.jpg");
                        public static readonly string wordsbg_png = Url("wordsbg.png");
                    }
                
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class config {
                private const string URLPATH = "~/Content/swf/config";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string paths_properties = Url("paths.properties");
            }
        
            public static readonly string playerProductInstall_swf = Url("playerProductInstall.swf");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class pub {
                private const string URLPATH = "~/Content/swf/pub";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string SocialAccessProxy_swf = Url("SocialAccessProxy.swf");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class xsd {
            private const string URLPATH = "~/Content/xsd";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string snGroupDiscussion_xsd = Url("snGroupDiscussion.xsd");
            public static readonly string vcfProfile_xsd = Url("vcfProfile.xsd");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


